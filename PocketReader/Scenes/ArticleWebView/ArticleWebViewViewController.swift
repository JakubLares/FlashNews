//
//  ArticleWebViewViewController.swift
//  PocketReader
//
//  Created by Jakub Lares on 20.08.18.
//  Copyright (c) 2018 Jakub Lares. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ArticleWebViewDisplayLogic: class {
    func displayArticleUrl(viewModel: ArticleWebView.GetArticleUrl.ViewModel)
}

class ArticleWebViewViewController: UIViewController, ArticleWebViewDisplayLogic {
    
    var interactor: ArticleWebViewBusinessLogic?
    var router: (NSObjectProtocol & ArticleWebViewRoutingLogic & ArticleWebViewDataPassing)?

    private let articleWebView = UIWebView()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ArticleWebViewInteractor()
        let presenter = ArticleWebViewPresenter()
        let router = ArticleWebViewRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        interactor?.getArticleUrl()
    }

    // MARK: UI

    private func setupUI() {
        view.backgroundColor = .white
        addShareButton(action: #selector(shareButtonPressed))
        setupWebView()
        activateConstraints()
    }

    private func setupWebView() {
        articleWebView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(articleWebView)
    }

    // MARK: Constraints

    private var articleWebViewConstraints: [NSLayoutConstraint] {
        return [
            articleWebView.topAnchor.constraint(equalTo: view.topAnchor),
            articleWebView.rightAnchor.constraint(equalTo: view.rightAnchor),
            articleWebView.leftAnchor.constraint(equalTo: view.leftAnchor),
            articleWebView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ]
    }

    private func activateConstraints() {
        NSLayoutConstraint.activate([
            articleWebViewConstraints
            ].flatMap({ $0 }))
    }

    // MARK: Display

    func displayArticleUrl(viewModel: ArticleWebView.GetArticleUrl.ViewModel) {
        articleWebView.loadRequest(viewModel.urlRequest)
    }

    // MARK: Logic

    @objc private func shareButtonPressed() {
        interactor?.shareArticle()
    }
}
