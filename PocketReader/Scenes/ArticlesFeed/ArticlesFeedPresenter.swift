//
//  ArticlesFeedPresenter.swift
//  PocketReader
//
//  Created by Jakub Lares on 18.08.18.
//  Copyright (c) 2018 Jakub Lares. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol ArticlesFeedPresentationLogic {
    func presentArticles(_ articles: [Article]?)
    func presentArticleDetail(_ article: Article)
    func presentError(_ error: Error?)
}

class ArticlesFeedPresenter: ArticlesFeedPresentationLogic {

    weak var viewController: ArticlesFeedDisplayLogic?

    // MARK: Presentation

    func presentArticles(_ articles: [Article]?) {
        viewController?.displayArticles(ArticlesFeed.GetArticles.ViewModel(articles: getArticlesViewModel(articles)))
    }

    func presentArticleDetail(_ article: Article) {
        viewController?.displayArticleDetail(ArticlesFeed.GetArticleDetail.ViewModel(title: getTitle(article.title),
                                                                                     published: getPublished(article.publishedAt),
                                                                                     imageUrl: getImageUrl(article.urlToImage),
                                                                                     author: getAuthor(article.author),
                                                                                     description: getDescription(article.description)))
    }

    func presentError(_ error: Error?) {
        let errorMessage = (error as NSError?)?.localizedDescription ?? NSLocalizedString("unknown.error", comment: "")
        let alert = UIAlertController(title: NSLocalizedString("error", comment: ""), message: errorMessage, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: NSLocalizedString("ok", comment: ""), style: .default, handler: nil))
        viewController?.displayAlert(alert)
    }

    // MARK: Getters

    private func getArticlesViewModel(_ articles: [Article]?) -> [ArticlesFeed.GetArticles.ArticleViewModel] {
        var articlesViewModel = [ArticlesFeed.GetArticles.ArticleViewModel]()
        articles?.forEach {
            articlesViewModel.append(ArticlesFeed.GetArticles.ArticleViewModel(title: getTitle($0.title),
                                                                      published: getPublishedRelative($0.publishedAt),
                                                                      imageUrl: getImageUrl($0.urlToImage)))
        }
        return articlesViewModel
    }

    private func getTitle(_ title: String?) -> String {
        return title ?? ""
    }

    private func getAuthor(_ author: String?) -> String {
        return author ?? ""
    }

    private func getDescription(_ description: String?) -> String {
        return description ?? ""
    }

    private func getPublishedRelative(_ date: Date?) -> String {
        guard let date = date else { return "" }
        let calendar = Calendar.withLocale

        if calendar.isDateInToday(date) {
            return NSLocalizedString("today", comment: "")
        } else if calendar.isDateInYesterday(date) {
            return NSLocalizedString("yesterday", comment: "")
        } else {
            guard let difference = calendar.dateComponents([.day], from: date, to: Date()).day else { return "" }
            return String(format: NSLocalizedString("days.ago", comment: ""), difference)
        }
    }

    private func getImageUrl(_ url: String?) -> URL? {
        guard let url = url else { return nil }
        return URL(string: url)
    }

    private func getPublished(_ date: Date?) -> String {
        guard let date = date else { return "" }
        return DateFormatter.czechLong.string(from: date)
    }
}
